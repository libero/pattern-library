@import "variables";
@import "utility-functions";
@import "mixins--typography";
@import "mixins--spacing";

/* stylelint-disable
     declaration-block-trailing-semicolon,
     block-closing-brace-newline-before,
     comment-empty-line-before
*/
@function get-breakpoint($string) {
  @if $string == "x-small" {
    @return #{get-rem-from-px($bkpt-site--x-small)}em
  } @else if $string == "small" {
    @return #{get-rem-from-px($bkpt-site--small)}em
  } @else if $string == "medium" {
    @return #{get-rem-from-px($bkpt-site--medium)}em
  } @else if $string == "wide" {
    @return #{get-rem-from-px($bkpt-site--wide)}em
  } @else if $string == "x-wide" {
    @return #{get-rem-from-px($bkpt-site--x-wide)}em
  }
}
/* stylelint-enable */

@mixin height($size_in_px) {
  height: #{$size_in_px}px;
  height: #{get-rem-from-px($size_in_px)}rem;
}

@mixin width($size_in_px) {
  width: #{$size_in_px}px;
  width: #{get-rem-from-px($size_in_px)}rem;
}

@mixin constrain-height($size_in_px, $extreme) {
  @if $extreme == min or $extreme == max {
    #{$extreme}-height: #{$size_in_px}px;
    #{$extreme}-height: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin constrain-width($size_in_px, $extreme) {
  @if $extreme == min or $extreme == max {
    #{$extreme}-width: #{$size_in_px}px;
    #{$extreme}-width: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin flexbox-centre-x-and-y {
  @supports (display: flex) {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 100%;
    height: 100%;
  }
}

@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: block;
  }

  &:after {
    clear: both;
  }
}

@mixin hidden() {
  display: none;
}

@mixin unhidden($display-as: block) {
  display: $display-as;
}

@mixin visually-hidden() {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

@mixin visually-unhidden($position-as: static) {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: auto;
  position: $position-as;
  width: auto;
}

@mixin box-shadow() {
  box-shadow: $libero-box-shadow;
}

@mixin arrow($direction: "up", $size: 7, $color: $libero-color-text-ui-background--reverse) {
  border: #{$size}px solid transparent;

  @if $direction == "right" {
    border-left-color: $color;
    border-right-width: 0;

  } @else if $direction == "down" {
    border-bottom-width: 0;
    border-top-color: $color;

  } @else if $direction == "left" {
    border-left-width: 0;
    border-right-color: $color;

  } @else if $direction == "up" {
    border-bottom-color: $color;
    border-top-width: 0;
  }
  content: "";
  height: 0;
  width: 0;
}

// From https://codepen.io/jonneal/pen/kptBs
@mixin chevron ($direction: "top", $colour: white, $size: 1em) {
  border-color: $colour;
  border-style: solid;
  border-width: 0.25em 0.25em 0 0;
  content: "";
  display: inline-block;
  height: $size;
  position: relative;
  top: -1px;
  vertical-align: middle;
  width: $size;

  @if $direction == "top" {
    transform: rotate(-45deg);
  } @else if $direction == "right" {
    transform: rotate(45deg);
  } @else if $direction == "bottom" {
    transform: rotate(135deg);
  } @else if $direction == "left" {
    transform: rotate(-135deg);
  }

}

@mixin loading-spinner($torus-width: 5, $size: 22, $highlight-color: $libero-color-primary,
$base-color: rgba(255, 255, 255, 0.2)) {
  animation: full-rotation 1.1s infinite linear;
  border: #{$torus-width}px solid $base-color;
  border-left-color: $highlight-color;
  border-radius: 50%;
  display: block;
  height: #{$size}px;
  overflow: hidden;
  text-indent: -9999em;
  transform: translateZ(0);
  width: #{$size}px;

  @keyframes full-rotation {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

}

@mixin body-para {
  @include body-typography();
  @include body-spacing();
}

@mixin inline-image {
  margin-bottom: 0.1em;
  max-height: 1em;
  vertical-align: middle;
}

@mixin visually-hide-below-breakpoint($breakpoint-name, $height, $margin-shorthand) {
  @if $breakpoint-name == "x-small" or $breakpoint-name == "small" or $breakpoint-name == "medium" or $breakpoint-name == "wide" or $breakpoint-name == "x-wide" {

    @include visually-hidden();

    @media only all and (min-width: get-breakpoint($breakpoint-name)) {
      @include visually-unhidden();
      overflow: hidden;

      // After visually unhiding, height and margin need to be explicitly set again
      @include height($height);
      @include margin($margin-shorthand);
    }

  }
}

@mixin discreet-link ($color: $libero-color-text, $has-hover-state: true) {
  border-bottom: 1px dotted $color;
  color: $color;
  text-decoration: none;

  @if $has-hover-state == true {
    &:hover {
      border-bottom-color: $libero-color-primary;
      color: $libero-color-primary;
    }
  } @else {
    &:hover {
      border-bottom-color: $color;
      color: $color;
    }

  }

}

