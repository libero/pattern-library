@import "utility-functions";
@import "variables";

// NOTE: mixins beginning with underscore "_" are internal to this file only: they MUST NOT be used externally.

@mixin _spacing-left($size-in-px, $space-type) {
  @if $size-in-px == 0 {
    #{$space-type}-left: 0;
  } @else {
    #{$space-type}-left: #{$size_in_px}px;
    #{$space-type}-left: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin _spacing-right($size-in-px, $space-type) {
  @if $size-in-px == 0 {
    #{$space-type}-right: 0;
  } @else {
    #{$space-type}-right: #{$size_in_px}px;
    #{$space-type}-right: #{get-rem-from-px($size_in_px)}rem;
  }
}

@mixin _when-left-to-right {
  html[dir="ltr"] &:not([dir]),
  &[dir="ltr"] {
    @content;
  }
}

@mixin _when-right-to-left {
  html[dir="rtl"] &:not([dir]),
  &[dir="rtl"] {
    @content;
  }
}

// Fallbacks for CSS logical properties contained within this mixin require the following treatment of HTML dir attributes:
//  - document level: always specified, via the HTML element
//  - block level: specified on every element within a block describing a direction switch.
//
// For example:
// <html lang="..." dir="ltr">
// ...
// <div>
//   Doesn't need a dir attribute. Most cases will be like this.
// </div>
//
//<div class="test" dir="rtl">
//
//  This block changes the text direction. Every descendant element must have its own dir attribute....
//
//  <div class="test" dir="rtl">... even if the direction doesn't change.</div>
//
//  <div class="test" dir="ltr">But obviously also when it does.</div>
//
//</div>
@mixin _spacing($size_in_px, $space_type, $dimension: "") {
  @if $space_type != padding and $space_type != margin {
    // This is for padding only
  } @else {
    @if $dimension == "" {
      @if $size_in_px == 0 {
        #{$space_type}: 0;
      } @else {
        #{$space_type}: #{$size_in_px}px;
        #{$space_type}: #{get-rem-from-px($size_in_px)}rem;
      }
    }
    @if $dimension == "inline" {
      @if $size_in_px == 0 {
        #{$space_type}-left: 0;
        #{$space_type}-right: 0;
        #{$space_type}-inline: 0;
      } @else if type_of($size_in_px) == list and length($size_in_px) >= 2 {

        $firstValue: nth($size_in_px, 1);
        $secondValue: nth($size_in_px, 2);

        @if $firstValue == $secondValue {

          @include _spacing-left($firstValue, $space_type);
          @include _spacing-right($secondValue, $space_type);

        } @else {

          @include _when-left-to-right {
            @include _spacing-left($firstValue, $space_type);
            @include _spacing-right($secondValue, $space_type);
          }

          @include _when-right-to-left {
            @include _spacing-right($firstValue, $space_type);
            @include _spacing-left($secondValue, $space_type);
          }

        }

        $derivedFirstValue: 0;
        $derivedSecondValue: 0;
        @if $firstValue != 0 {
          $derivedFirstValue: #{get-rem-from-px($firstValue)}rem;
        }
        @if $secondValue != 0 {
          $derivedSecondValue: #{get-rem-from-px($secondValue)}rem;
        }

        @if $firstValue == $secondValue {
          #{$space_type}-inline: $derivedFirstValue;
        } @else {
          html[dir] & {
            #{$space_type}-inline: $derivedFirstValue $derivedSecondValue;
          }
        }

      } @else {

        @include _spacing-left($size_in_px, $space_type);
        @include _spacing-right($size_in_px, $space_type);
        #{$space_type}-inline: #{get-rem-from-px($size_in_px)}rem;

      }
    }

    @if $dimension == "inline-start" {
      @if $size_in_px == 0 {
        @include _when-left-to-right {
          #{$space_type}-left: 0;
        }
        @include _when-right-to-left {
          #{$space_type}-right: 0;
        }
        html[dir] & {
          #{$space_type}-inline-start: 0;
        }
      } @else {
        @include _when-left-to-right {
          @include _spacing-left(nth($size_in_px, 1), $space_type);
        }
        @include _when-right-to-left {
          @include _spacing-right(nth($size_in_px, 1), $space_type);
        }
        html[dir] & {
          #{$space_type}-inline-start: #{get-rem-from-px(nth($size_in_px, 1))}rem;
        }
      }
    }

    @if $dimension == "inline-end" {
      @if $size_in_px == 0 {
        @include _when-left-to-right {
          #{$space_type}-right: 0;
        }
        @include _when-right-to-left {
          #{$space_type}-left: 0;
        }
        html[dir] & {
          #{$space_type}-inline-end: 0;
        }
      } @else {
        @include _when-left-to-right {
          @include _spacing-right(nth($size_in_px, 1), $space_type);
        }
        @include _when-right-to-left {
          @include _spacing-left(nth($size_in_px, 1), $space_type);
        }
        html[dir] & {
          #{$space_type}-inline-end: #{get-rem-from-px(nth($size_in_px, 1))}rem;
        }
      }
    }

    // Vertical writing modes not yet supported
    @if $dimension == "block" {
      @if $size_in_px == 0 {
        #{$space_type}-top: 0;
        #{$space_type}-bottom: 0;
        #{$space_type}-block: 0;

      } @else if type_of($size_in_px) == list and length($size_in_px) >= 2 {
        #{$space_type}-top: #{nth($size_in_px, 1)}px;
        #{$space_type}-top: #{get-rem-from-px(nth($size_in_px, 1))}rem;
        #{$space_type}-bottom: #{nth($size_in_px, 2)}px;
        #{$space_type}-bottom: #{get-rem-from-px(nth($size_in_px, 2))}rem;
        #{$space_type}-block: #{get-rem-from-px(nth($size_in_px, 1))}rem #{get-rem-from-px(nth($size_in_px, 2))}rem;;

      } @else {
        #{$space_type}-top: #{$size_in_px}px;
        #{$space_type}-top: #{get-rem-from-px($size_in_px)}rem;
        #{$space_type}-bottom: #{$size_in_px}px;
        #{$space_type}-bottom: #{get-rem-from-px($size_in_px)}rem;
        #{$space_type}-block: #{get-rem-from-px($size_in_px)}rem;
      }
    }
  }
}

@mixin padding($size_in_px, $dimension: "") {
  @include _spacing($size_in_px, padding, $dimension);

}

@mixin margin($size_in_px, $dimension: "") {
  @include _spacing($size_in_px, margin, $dimension);
}

@mixin nospace($dimension: "") {
  $allowed-dimensions: "inline", "inline-start", "inline-end", "block", "";
  @if index($allowed-dimensions, $dimension) != null {
    @include margin(0, $dimension);
    @include padding(0, $dimension);
  } @else if $dimension == "block-start" {
    //vertical writing modes not yet supported
    margin-top: 0;
    margin-block-start: 0;
    padding-top: 0;
    padding-block-start: 0;
  } @else if $dimension == "block-end" {
    //vertical writing modes not yet supported
    margin-bottom: 0;
    margin-block-end: 0;
    padding-bottom: 0;
    padding-block-end: 0;
  }
}

// blg stands for "baseline grid"

@mixin blg-spacing($dimension, $level, $type: "padding") {
  @if $type == "padding" {
    @if $level == "extra-small" {
      @include padding($libero-blg-space-extra-small-in-px, $dimension);
    } @else if $level == "small" {
      @include padding($libero-blg-space-small-in-px, $dimension);
    } @else if $level == "smallish" {
      @include padding($libero-blg-space-smallish-in-px, $dimension);
    } @else if $level == "medium" {
      @include padding($libero-blg-space-medium-in-px, $dimension);
    } @else if $level == "large" {
      @include padding($libero-blg-space-large-in-px, $dimension);
    }
  } @else if $type == "margin" {
    @if $level == "extra-small" {
      @include margin($libero-blg-space-extra-small-in-px, $dimension);
    } @else if $level == "small" {
      @include margin($libero-blg-space-small-in-px, $dimension);
    } @else if $level == "smallish" {
      @include margin($libero-blg-space-smallish-in-px, $dimension);
    } @else if $level == "medium" {
      @include margin($libero-blg-space-medium-in-px, $dimension);
    } @else if $level == "large" {
      @include margin($libero-blg-space-large-in-px, $dimension);
    }
  }
}

@mixin blg-pad-top--small-to-medium {

  @include blg-spacing("top", "small");

  @media only all and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
    @include blg-spacing("top", "medium");
  }

}

@mixin blg-pad-bottom--small-to-medium {

  @include blg-spacing("bottom", "small");

  @media only all and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
    @include blg-spacing("bottom", "medium");
  }

}

@mixin blg-pad-top--large-to-extra-large {

  @include blg-spacing("top", "large");

  @media only all and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
    @include blg-spacing("top", "extra-large");
  }

}

@mixin blg-pad-bottom--large-to-extra-large {

  @include blg-spacing("bottom", "large");

  @media only all and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
    @include blg-spacing("bottom", "extra-large");
  }

}

@mixin blg-pad-vertical-small-to-medium {
  @include blg-pad-top--small-to-medium();
  @include blg-pad-bottom--small-to-medium();
}

@mixin blg-pad-vertical-large-to-extra-large {
  @include blg-pad-top--large-to-extra-large();
  @include blg-pad-bottom--large-to-extra-large();
}

@mixin blg-margin-bottom--medium-to-large {

  @include blg-spacing("bottom", "medium", "margin");

  @media only all and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
    @include blg-spacing("bottom", "large", "margin");
  }

}

@mixin blg-margin-bottom--small-to-medium {

  @include blg-spacing("bottom", "small", "margin");

  @media only all and (min-width: #{get-rem-from-px($bkpt-site--medium)}em) {
    @include blg-spacing("bottom", "medium", "margin");
  }

}

@mixin blg-column-container() {
  @include blg-margin-bottom--medium-to-large();
}

@mixin h1-spacing() {
  margin: 0;
}

@mixin h2-spacing() {
  margin: 0;
  @include padding(21, "block-end");
  @include padding(21, "block-start");
}

@mixin h3-spacing() {
  margin: 0;
  @include blg-spacing("top", "extra-small");
  @include blg-spacing("bottom", "extra-small");
}

@mixin h4-spacing() {
  margin: 0;
  @include blg-spacing("top", "extra-small");
  @include blg-spacing("bottom", "extra-small");
}

@mixin h5-spacing() {
  margin: 0;
  @include blg-spacing("top", "extra-small");
  @include blg-spacing("bottom", "extra-small");
}

@mixin h6-spacing() {
  margin: 0;
  @include padding(10, "block-start");
  @include padding(14, "block-end");
}

@mixin body-spacing() {
  margin: 0;
  @include blg-spacing("bottom", "small", "margin");
}

@mixin small-spacing() {
  @include blg-spacing("bottom", "small");
}
