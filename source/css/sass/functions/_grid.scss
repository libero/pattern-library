// TODO: Move to configuration once using refactor arriving via npm module
$grid: (
  main-column-count: 12,
  edge-colum-count:1,
  edge-space-medium: 7vw,
  edge-space-large: 14vw,
  column-gap: 1.6%,
  max-width: 1114px
);

// Nullify the effect of the first and last gutters by reducing both the first and last column tracks by the width of the grid gap.
@function grid-edge-space($size, $grid-gap, $edge-column-count) {
  // To calculate the width of each edge column, take the total size of the edge, subtract the width of all that edge's
  // column gutters, and divide the result by the number of edge columns required
  @return repeat($edge-column-count, calc((#{map_get($grid, edge-space-#{$size})} - (#{$grid-gap} * #{$edge-column-count})) / #{$edge-column-count}));
}

// return the column gap even if specified as a percentage
@function calc-fixed-col-gap($specified-col-gap, $max-width) {
  @if unit($specified-col-gap) != "%" {
    @return $specified-col-gap;
  }
  // "$specified-col-gap / 100%" divides $specified-col-gap by 100 and cancels out the % sign making the expression unitless.
  @return $max-width * ($specified-col-gap / 100%);
}

// listing explicitly rather than using css's repeat as we want a different grid line name for each repeated instance
@function build-main-columns($column-count, $size) {
  $columns: "";
  @for  $col-number from 1 to $column-count + 1 {
    $track-name: "";
    @if $col-number == 1 {
      $track-name: "[#{main-start column-}#{$col-number}]";
    } @else {
      $track-name: "[#{column-}#{$col-number}]";
    }
    $columns: $columns + " #{$track-name} #{$size}";
  }
  $columns: $columns + " [main-end]";
  @return unquote($columns);
}
