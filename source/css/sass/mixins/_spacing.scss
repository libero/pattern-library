@import "validation";
@import "sizes";
@import "types";
@import "../functions/validation";
@import "../mixins/media-query";
@import "../variables/baselinegrid";
@import "../variables/breakpoint";
@import "../variables/grid";

@mixin _when-left-to-right {
  html[dir="ltr"] &:not([dir]),
  &[dir="ltr"] {
    @content;
  }
}

@mixin _when-right-to-left {
  html[dir="rtl"] &:not([dir]),
  &[dir="rtl"] {
    @content;
  }
}

// Fallbacks for CSS logical properties contained within this mixin require the following treatment of HTML dir attributes:
//  - document level: always specified, via the HTML element
//  - block level: specified on every element within a block describing a direction switch.
//
// For example:
// <html lang="..." dir="ltr">
// ...
// <div>
//   Doesn't need a dir attribute. Most cases will be like this.
// </div>
//
//<div class="test" dir="rtl">
//
//  This block changes the text direction. Every descendant element must have its own dir attribute....
//
//  <div class="test" dir="rtl">... even if the direction doesn't change.</div>
//
//  <div class="test" dir="ltr">But obviously also when it does.</div>
//
//</div>
@mixin _spacing($sizes, $space-type, $dimension: "") {

  @if $dimension == "" {
    @if length($sizes) > 4 {
      @include _error("More than four sizes supplied when no dimension");
    } @else {
      @include rem($space-type, $sizes);
    }
  }

  @else if $dimension == "inline" {

    @if length($sizes) > 2 {
      @include _error("More than two sizes supplied with 'inline' dimension");
    } @else if length($sizes) == 1 {

      @include rem((
        #{$space-type}-left: $sizes,
        #{$space-type}-right: $sizes,
      ));
      #{$space-type}-inline: rem($sizes);

    } @else {

      $firstValue: nth($sizes, 1);
      $secondValue: nth($sizes, 2);

      @if $firstValue == $secondValue {

        @include rem((
          #{$space-type}-left: $firstValue,
          #{$space-type}-right: $secondValue,
        ));
        #{$space-type}-inline: rem($firstValue);

      } @else {

        @include _when-left-to-right {
          @include rem((
            #{$space-type}-left: $firstValue,
            #{$space-type}-right: $secondValue,
          ));
        }

        @include _when-right-to-left {
          @include rem((
            #{$space-type}-right: $firstValue,
            #{$space-type}-left: $secondValue,
          ));
        }

        html[dir] & {
          #{$space-type}-inline: rem($firstValue $secondValue);
        }

      }

    }
  }

  @else if $dimension == "inline-start" {

    @if length($sizes) > 1 {
      @include _error("More than one size supplied with 'inline-start' dimension");
    } @else {
      @include _when-left-to-right {
        @include rem(#{$space-type}-left, $sizes);
      }
      @include _when-right-to-left {
        @include rem(#{$space-type}-right, $sizes);
      }
      html[dir] & {
        #{$space-type}-inline-start: rem($sizes);
      }
    }
  }

  @else if $dimension == "inline-end" {

    @if length($sizes) > 1 {
      @include _error("More than one size supplied with 'inline-end' dimension");
    } @else {
      @include _when-left-to-right {
        @include rem(#{$space-type}-right, $sizes);
      }
      @include _when-right-to-left {
        @include rem(#{$space-type}-left, $sizes);
      }
      html[dir] & {
        #{$space-type}-inline-end: rem($sizes);
      }
    }
  }

  // Vertical writing modes not yet supported
  @else if $dimension == "block" {

    @if length($sizes) > 2 {
      @include _error("More than two sizes supplied with 'block' dimension");
    } @else {
      @if length($sizes) == 2 {
        @include rem((
          #{$space-type}-top: nth($sizes, 1),
          #{$space-type}-bottom: nth($sizes, 2),
        ));
      } @else {
        @include rem((
          #{$space-type}-top: $sizes,
          #{$space-type}-bottom: $sizes,
        ));
      }
      #{$space-type}-block: rem($sizes);
    }
  }

  @else if $dimension == "block-start" {
    @if length($sizes) > 1 {
      @include _error("More than one size supplied with 'block-start' dimension");
    } @else {
      @include rem(#{$space-type}-top, $sizes);
      #{$space-type}-block-start: rem($sizes);
    }
  }

  @else if $dimension == "block-end" {
    @if length($sizes) > 1 {
      @include _error("More than one size supplied with 'block-end' dimension");
    } @else {
      @include rem(#{$space-type}-bottom, $sizes);
      #{$space-type}-block-end: rem($sizes);
    }
  }

  @else if index(("top", "bottom", "left", "right"), $dimension) {
    @include _error("'#{$dimension}' is a physical dimension, use its logical equivilant");
  }

  @else {
    @include _error("Unknown dimension '#{$dimension}'");
  }
}

@mixin padding($sizes, $dimension: "") {
  @include _spacing($sizes, padding, $dimension);
}

@mixin margin($sizes, $dimension: "") {
  @include _spacing($sizes, margin, $dimension);
}

@mixin nospace($dimension: "") {
  @include margin(0, $dimension);
  @include padding(0, $dimension);
}

// blg stands for "baseline grid"

@mixin blg-spacing($dimension, $level, $type: "padding") {
  @if $type == "padding" {
    @if $level == "extra-small" {
      @include padding($baselinegrid-space-extra-small, $dimension);
    } @else if $level == "small" {
      @include padding($baselinegrid-space-small, $dimension);
    } @else if $level == "smallish" {
      @include padding($baselinegrid-space-smallish, $dimension);
    } @else if $level == "medium" {
      @include padding($baselinegrid-space-medium, $dimension);
    } @else if $level == "large" {
      @include padding($baselinegrid-space-large, $dimension);
    }
  } @else if $type == "margin" {
    @if $level == "extra-small" {
      @include margin($baselinegrid-space-extra-small, $dimension);
    } @else if $level == "small" {
      @include margin($baselinegrid-space-small, $dimension);
    } @else if $level == "smallish" {
      @include margin($baselinegrid-space-smallish, $dimension);
    } @else if $level == "medium" {
      @include margin($baselinegrid-space-medium, $dimension);
    } @else if $level == "large" {
      @include margin($baselinegrid-space-large, $dimension);
    }
  }
}

@mixin blg-pad-top--small-to-medium {

  @include blg-spacing("block-start", "small");

  @include mq($from: medium) {
    @include blg-spacing("block-start", "medium");
  }

}

@mixin blg-pad-bottom--small-to-medium {

  @include blg-spacing("block-end", "small");

  @include mq($from: medium) {
    @include blg-spacing("block-end", "medium");
  }

}

@mixin blg-pad-top--large-to-extra-large {

  @include blg-spacing("block-start", "large");

  @include mq($from: medium) {
    @include blg-spacing("block-start", "extra-large");
  }

}

@mixin blg-pad-bottom--large-to-extra-large {

  @include blg-spacing("block-end", "large");

  @include mq($from: medium) {
    @include blg-spacing("block-end", "extra-large");
  }

}

@mixin blg-pad-vertical-small-to-medium {
  @include blg-pad-top--small-to-medium();
  @include blg-pad-bottom--small-to-medium();
}

@mixin blg-pad-vertical-large-to-extra-large {
  @include blg-pad-top--large-to-extra-large();
  @include blg-pad-bottom--large-to-extra-large();
}

@mixin blg-margin-bottom--medium-to-large {

  @include blg-spacing("block-end", "medium", "margin");

  @include mq($from: medium) {
    @include blg-spacing("block-end", "large", "margin");
  }

}

@mixin blg-margin-bottom--small-to-medium {

  @include blg-spacing("block-end", "small", "margin");

  @include mq($from: medium) {
    @include blg-spacing("block-end", "medium", "margin");
  }

}

@mixin blg-column-container() {
  @include blg-margin-bottom--medium-to-large();
}

@mixin h1-spacing() {
  margin: 0;
}

@mixin h2-spacing() {
  margin: 0;
  @include padding(21px, "block-end");
  @include padding(21px, "block-start");
}

@mixin h3-spacing() {
  margin: 0;
  @include blg-spacing("block-start", "extra-small");
  @include blg-spacing("block-end", "extra-small");
}

@mixin h4-spacing() {
  margin: 0;
  @include blg-spacing("block-start", "extra-small");
  @include blg-spacing("block-end", "extra-small");
}

@mixin h5-spacing() {
  margin: 0;
  @include blg-spacing("block-start", "extra-small");
  @include blg-spacing("block-end", "extra-small");
}

@mixin h6-spacing() {
  margin: 0;
  @include padding(10px, "block-start");
  @include padding(14px, "block-end");
}

@mixin body-spacing() {
  margin: 0;
  @include blg-spacing("block-end", "small", "margin");
}

@mixin small-spacing() {
  @include blg-spacing("block-end", "small");
}

@mixin wrapper() {
  box-sizing: content-box;
  @include max-inline-size($grid-max_width);
  margin: auto;

  @include padding(7%, "inline");

  @include mq($media-type: screen, $from: medium) {
    @include padding(14%, "inline");
  }

  @include mq($media-type: screen, $from: x-wide) {
    @include padding(3%, "inline");
  }
}
