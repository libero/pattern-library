@import "../../mixins/grid";
@import "../../mixins/media-query";
@import "../../mixins/sizes";
@import "../../mixins/spacing";
@import "../../variables/color";
@import "../../variables/siteHeader";

@mixin _custom-property-fallback--site-header {
  @include block-size($siteHeader-block_size__default);
  @include mq($from: medium) {
    @include block-size($siteHeader-block_size__medium);
  }
}

@mixin _custom-property-fallback--site-header-image($calculated) {
  @include block-size($siteHeader-image-block_size__default);
  @include max-block-size(map_get($calculated, max-block-size--default));
  @include padding($siteHeader-image-inline_space__default, inline);
  @include mq($from: medium) {
    @include block-size($siteHeader-image-block_size__medium);
    @include max-block-size(map_get($calculated, max-block-size--medium));
    @include padding($siteHeader-image-inline_space__medium, inline);
  }
  @include mq($from: x-wide) {
    @include padding($siteHeader-image-inline_start_space__x_wide, inline-start);
  }
}

@mixin _custom-property-fallback($selector, $args: ()) {
  $_selector: nth(simple-selectors($selector), 1);
  @if $_selector == ".site-header" {
    @include _custom-property-fallback--site-header();
  } @else if $_selector == ".site-header__image" {
    @include _custom-property-fallback--site-header-image($args);
  }
}

.site-header {

  --block-size: #{$siteHeader-block_size__default};
  @include mq($from: medium) {
    --block-size: #{$siteHeader-block_size__medium};
  }

  @include margin(0 auto);
  @include padding($siteHeader-block_start_space $siteHeader-block_end_space, block);
  @include max-inline-size($grid-max_width);

  position: relative;
  @supports (display:flex) {
    position: static;
    display: flex;
    align-items: center;
  }

  @include _custom-property-fallback(&);
  @include block-size(var(--block-size));

}

.site-header__logo_link {

  line-height: 0;

  // TODO: use @mixin inset() from https://github.com/libero/pattern-library/pull/98 once it makes it into the main branch
  block-start: calc(50% - #{$siteHeader-image-block_size__default} / 2);
  @include mq($from: medium) {
    block-start: calc(50% - #{$siteHeader-image-block_size__medium} / 2);
  }

  position: relative;
  @supports (display:flex) {
    position: static;
    display: flex;
    align-items: center;
  }

  &:after {
    background-color: $color-text-dividers;
    content: "";
    display: inline-block;
    // Prevent expression in rem to stop rounding down to 0 width in IE
    @include inline-size(1px, false);
    @include block-size(24px);

    @include mq($from: medium) {
      position: relative;
      // TODO: use @mixin inset() when available
      block-start: -6px;
    }
    @supports (display: flex) {
      position: static;
    }
  }

}

.site-header__image {

  box-sizing: content-box;

  $_inviolate-space: $siteHeader-block_start_space + $siteHeader-block_end_space + $grid-divider_size;
  $_max-block-size--default: $siteHeader-block_size__default - $_inviolate-space;
  $_max-block-size--medium: $siteHeader-block_size__medium - $_inviolate-space;

  @include _custom-property-fallback(&, (max-block-size--default: $_max-block-size--default, max-block-size--medium: $_max-block-size--medium));

  --block-size: #{$siteHeader-image-block_size__default};
  --max-block-size: #{$_max-block-size--default};
  --inline-end-space: #{$siteHeader-image-inline_space__default};
  --inline-start-space: var(--inline-end-space);
  @include mq($from: medium) {
    --block-size: #{$siteHeader-image-block_size__medium};
    --max-block-size: #{$_max-block-size--medium};
    --inline-end-space: #{$siteHeader-image-inline_space__medium};
  }
  @include mq($from: x-wide) {
    --inline-start-space: #{$siteHeader-image-inline_start_space__x_wide};
  }

  @supports (--name: value) {
    @include block-size(var(--block-size));
    @include max-block-size(var(--max-block-size));
    @include padding(var(--inline-start-space) var(--inline-end-space), inline);
  }

}
