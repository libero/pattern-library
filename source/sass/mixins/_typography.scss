@import "../mixins/types";
@import "../settings/baselinegrid";
@import "../settings/color";
@import "../settings/font";
@import "spacing";
@import "utilities";
@import "scale";

@mixin set-font-size-and-line-height($font-size, $block-size: $baselinegrid-space-small) {
  @include rem(font-size, $font-size);
  line-height: $block-size / $font-size;
}

@mixin _heading-base-typography() {
  font-family: $font-secondary;
  font-weight: 600;
}

@mixin h1-typography() {
  @include _heading-base-typography();
  @include set-font-size-and-line-height(scale(7), $baselinegrid-space-medium);
}

@mixin h2-typography() {
  @include _heading-base-typography();
  @include set-font-size-and-line-height(scale(4), ($baselinegrid-space-small + $baselinegrid-space-smallish) / 2);
}

@mixin h3-typography() {
  @include _heading-base-typography();
  @include set-font-size-and-line-height(scale(3));
}

@mixin h4-typography() {
  @include _heading-base-typography();
  @include set-font-size-and-line-height(scale(2));
}

@mixin h5-typography() {
  @include _heading-base-typography();
  @include set-font-size-and-line-height(scale(1));
}

@mixin h6-typography() {
  @include _heading-base-typography();
  @include set-font-size-and-line-height(scale(0));
}

@mixin body-typography() {
  font-family: $font-primary;
  @include set-font-size-and-line-height(scale(0));
  font-weight: normal;
}

@mixin inline-image {
  @include margin(0.1em, block-end);
  @include max-block-size(1em);
  vertical-align: middle;
}

@mixin _base-font-variant-position($position) {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
  @supports (font-variant-position: #{$position}) {
    font-size: inherit;
    font-variant-position: $position;
    position: static;
  }
}

@mixin font-variant-position($position) {
  @if $position == sub {
    @include _base_font-variant-position($position);
    bottom: -0.25em; // stylelint-disable-line csstools/use-logical
  } @else if $position == super {
    @include _base_font-variant-position($position);
    top: -0.5em; // stylelint-disable-line csstools/use-logical
  } @else {
    @include _error("Unknown position '#{$position}'");
  }
}

@mixin _label-typography($color, $uppercase: true) {
  color: $color;
  font-family: $font-secondary;
  font-weight: normal;
  @include set-font-size-and-line-height(scale(-3));
  letter-spacing: $font-letterspacing-label;
  @if $uppercase {
    text-transform: uppercase;
  }
}

@mixin label-content-typography($color: $color-text-secondary, $uppercase: true) {
  @include _label-typography($color, $uppercase);
}

@mixin label-tag-typography() {
  @include _label-typography($color-primary-normal);
}

@mixin covert-link($hover-color: $color-primary-dark) {
  @include inherit-all($ensure: color text-decoration) {
    border: 0;
    cursor: pointer;
    display: inline;
    padding: 0;
  }

  & {
    @content;
  }

  &:hover {
    color: $hover-color;
  }
}

@mixin subtle-link() {
  @include inherit-all($ensure: color) {
    cursor: pointer;
    display: inline;
    text-decoration: underline;
  }
}

@mixin caption-typography() {
  font-family: $font-secondary;
  @include set-font-size-and-line-height(scale(-2));
}

@mixin list-style-none() {
  @include padding(0, inline-start);
  // Overflow auto is so the bullet will be still read from a screen reader and will push the bullet off screen
  overflow-x: auto;
}

@mixin list-separator($separator: default) {

  @if $separator == default {

    &:after {
      content: ",\a0";
    }

    &:lang(ar):after {
      content: "،\a0";
    }

    &:lang(ja):after {
      content: "、";
    }

    &:last-child:after {
      content: "";
    }

  } @else if $separator == alternative {

    &:after {
      content: ";\a0";
    }

    &:lang(ar):after {
      content: "\61b\a0";
    }

    &:last-child:after {
      content: "";
    }

  } @else {
    @include _error("Unknown list separator '#{$separator}'");
  }

}
