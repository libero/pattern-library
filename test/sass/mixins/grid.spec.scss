@import "../test";
@import "../../../source/css/sass/mixins/grid";

@include describe("@mixin grid-span-full") {

  @include it("Sets the column start / end tracks to those for 'full'") {

    @include assert() {

      @include output {
        @include grid-span-full();
      }

      @include expect {
        grid-column: full;
      }
    }
  }

}

@include describe("@mixin grid-span-main") {

  @include it("Sets the column start / end tracks to those for 'main'") {

    @include assert() {

      @include output {
        @include grid-span-main();
      }

      @include expect {
        grid-column: main;
      }
    }
  }

}

@include describe("@mixin grid-setup-base") {

  @include it("Sets the minimal styles required for the grid system") {

    $gap: 20px;

    @include assert() {

      @include output {
        @include grid-setup-base($gap);
      }

      @include expect {
        display: grid;
        grid-column-gap: $gap;
        grid-template-rows: [site-header] auto [main] 1fr;
        grid-column: full;
      }
    }
  }

}

@include describe("@mixin grid-setup-basic-columns") {

  @include it("correctly sets the column templates for the grid without using any column track names") {

    @include assert() {

      @include output {
        @include grid-setup-basic-columns(1, 1.6%, 1114px);
      }

      @include expect {
        grid-template-columns:
          [full-start] repeat(1, calc((7vw - (1.6% * 1)) / 1))
          [main-start] repeat(12, 1fr) [main-end]
          repeat(1, calc((7vw - (1.6% * 1)) / 1)) [full-end];

        @media (min-width: 45.625em) {
          grid-template-columns:
            [full-start] repeat(1, calc((14vw - (1.6% * 1)) / 1))
            [main-start] repeat(12, 1fr) [main-end]
            repeat(1, calc((14vw - (1.6% * 1)) / 1)) [full-end];
        }

        @media (min-width: 75em) {
          grid-column-gap: 17.824px;
          grid-template-columns:
            [full-start] repeat(1, 1fr)
            [main-start] repeat(12, 76.49467px) [main-end]
            repeat(1, 1fr) [full-end];
        }

      }

    }

  }

}

@include describe("@mixin grid-setup-content-no-secondary-content") {

  @include it("correctly sets the column templates for the grid, including appropriate column track names") {

    @include assert() {

      @include output {
        @include grid-setup-content-no-secondary-content(1, 1.6%, 1114px);
      }

      @include expect {
        display: grid;
        grid-column-gap: 1.6%;
        grid-template-rows: [site-header] auto [main] 1fr;
        grid-column: full;

        grid-template-columns:
          [full-start] repeat(1, calc((7vw - (1.6% * 1)) / 1))
          [main-start primary-start tertiary-start] repeat(12, 1fr) [tertiary-end primary-end main-end]
          repeat(1, calc((7vw - (1.6% * 1)) / 1)) [full-end];

        @media (min-width: 45.625em) {
          grid-template-columns:
            [full-start] repeat(1, calc((14vw - (1.6% * 1)) / 1))
            [main-start] 1fr [primary-start tertiary-start] repeat(10, 1fr) [primary-end tertiary-end] 1fr [main-end]
            repeat(1, calc((14vw - (1.6% * 1)) / 1)) [full-end];
        }

        @media (min-width: 56.25em) {
          grid-template-columns:
            [full-start] repeat(1, calc((14vw - (1.6% * 1)) / 1))
            [main-start] 1fr [primary-start tertiary-start] repeat(10, 1fr) [primary-end tertiary-end] 1fr [main-end]
            repeat(1, calc((14vw - (1.6% * 1)) / 1)) [full-end];
        }

        @media (min-width: 75em) {
          grid-column-gap: 17.824px;
          grid-template-columns:
            [full-start] repeat(1, 1fr)
            [main-start tertiary-start] repeat(2, 76.49467px) [tertiary-end primary-start] repeat(8, 76.49467px) [primary-end] repeat(2, 76.49467px) [main-end]
            repeat(1, 1fr) [full-end];

        }

      }

    }

  }

}

@include describe("@mixin grid-setup-content-with-secondary-content") {

  @include it("correctly sets the column templates for the grid, including appropriate column track names, allowing for placement of secondary content") {

    @include assert() {

      @include output {
        @include grid-setup-content-with-secondary-content(1, 1.6%, 1114px);
      }

      @include expect {
        display: grid;
        grid-column-gap: 1.6%;
        grid-template-rows: [site-header] auto [main] 1fr;
        grid-column: full;

        grid-template-columns:
          [full-start] repeat(1, calc((7vw - (1.6% * 1)) / 1))
          [main-start primary-start secondary-start tertiary-start] repeat(12, 1fr) [tertiary-end secondary-end primary-end main-end]          repeat(1, calc((7vw - (1.6% * 1)) / 1)) [full-end];

        @media (min-width: 45.625em) {
          grid-template-columns:
            [full-start] repeat(1, calc((14vw - (1.6% * 1)) / 1))
            [main-start primary-start tertiary-start] repeat(8, 1fr) [primary-end secondary-start] repeat(4, 1fr) [secondary-end tertiary-end main-end]
            repeat(1, calc((14vw - (1.6% * 1)) / 1)) [full-end];
        }

        @media (min-width: 56.25em) {
          grid-template-columns:
            [full-start] repeat(1, calc((14vw - (1.6% * 1)) / 1))
            [main-start primary-start tertiary-start] repeat(8, 1fr) [primary-end secondary-start] repeat(4, 1fr) [secondary-end tertiary-end main-end]
            repeat(1, calc((14vw - (1.6% * 1)) / 1)) [full-end];
        }

        @media (min-width: 75em) {
          grid-column-gap: 17.824px;
          grid-template-columns:
            [full-start] repeat(1, 1fr)
            [main-start tertiary-start] repeat(2, 76.49467px) [tertiary-end primary-start] repeat(7, 76.49467px) [primary-end secondary-start] repeat(3, 76.49467px) [secondary-end main-end]
            repeat(1, 1fr) [full-end];

        }

      }

    }

  }

}

@include describe("@mixin grid-main-content") {

  @include it("errors if the breakpoint is x-wide but no fixed width column track is supplied") {

    @include assert-equal(
      grid-main-content(false, x-wide),
      "A column track fixed width must be provided for the x-wide breakpoint"
    );

  }

}

