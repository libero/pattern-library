@import "test";
@import "../../source/css/sass/_utility-functions.scss";

@include test-module("the function get-rem-from-px [Function]") {

  @include test("returns 2 when supplied with 32") {
    @include assert-equal(
            get-rem-from-px(32),
            2
    );
  }

  @include test("returns 2.5 when supplied with 40") {
    @include assert-equal(
            get-rem-from-px(40),
            2.5
    );
  }

}

@include test-module("validate-spacing-arguments [Function]") {

  @include test("errors when the space-type is neither margin nor padding") {
    @include assert-equal(
            validate-spacing-arguments((1), "not-margin-nor-padding", ""),
            "ERROR: Incorrect space-type supplied: must be either 'margin' or 'padding'"
    );
  }

  @include test("does not error when the space-type is padding") {
    @include assert-equal(
            validate-spacing-arguments((1), "padding", ""),
            "OK"
    );
  }

  @include test("does not error when the space-type is margin") {
    @include assert-equal(
            validate-spacing-arguments((1), "margin", ""),
            "OK"
    );
  }

  @include test("errors when 5 sizes values passed and no dimension") {
    @include assert-equal(
            validate-spacing-arguments((1 2 3 4 5), "margin", ""),
            "ERROR: More than four sizes supplied when no dimension"
    );
  }

  @include test("does not error when < 5 sizes values passed and no dimension") {
    @include assert-equal(
            validate-spacing-arguments((1 2 3 4), "margin", ""),
            "OK"
    );

    @include assert-equal(
            validate-spacing-arguments((1 2 3), "margin", ""),
            "OK"
    );

    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", ""),
            "OK"
    );

    @include assert-equal(
            validate-spacing-arguments((1), "margin", ""),
            "OK"
    );

  }

  @include test("errors when 3 sizes values passed with dimension 'inline'") {
    @include assert-equal(
            validate-spacing-arguments((1 2 3), "margin", "inline"),
            "ERROR: More than two sizes supplied with 'inline' dimension"
    );
  }

  @include test("does not error when < 3 sizes values passed with dimension 'inline'") {
    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", "inline"),
            "OK"
    );

    @include assert-equal(
            validate-spacing-arguments((1), "margin", "inline"),
            "OK"
    );
  }

  @include test("errors when 2 sizes values passed with dimension 'inline-start'") {
    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", "inline-start"),
            "ERROR: More than one size supplied with 'inline-start' dimension"
    );
  }

  @include test("does not error when 1 size value passed with dimension 'inline-start'") {
    @include assert-equal(
            validate-spacing-arguments((1), "margin", "inline-start"),
            "OK"
    );
  }

  @include test("errors when 2 sizes values passed with dimension 'inline-end'") {
    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", "inline-end"),
            "ERROR: More than one size supplied with 'inline-end' dimension"
    );
  }

  @include test("does not error when 1 size value passed with dimension 'inline-end'") {
    @include assert-equal(
            validate-spacing-arguments((1), "margin", "inline-start"),
            "OK"
    );
  }

  @include test("errors when 3 sizes values passed with dimension 'block'") {
    @include assert-equal(
            validate-spacing-arguments((1 2 3), "margin", "block"),
            "ERROR: More than two sizes supplied with 'block' dimension"
    );
  }

  @include test("does not errors when < 3 sizes values passed with dimension 'inline'") {
    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", "block"),
            "OK"
    );

    @include assert-equal(
            validate-spacing-arguments((1), "margin", "block"),
            "OK"
    );

  }

  @include test("errors when 2 sizes values passed with dimension 'block-start'") {
    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", "block-start"),
            "ERROR: More than one size supplied with 'block-start' dimension"
    );
  }

  @include test("does not error when 1 size value passed with dimension 'block-start'") {
    @include assert-equal(
            validate-spacing-arguments((1), "margin", "block-start"),
            "OK"
    );
  }

  @include test("errors when 2 sizes values passed with dimension 'block-end'") {
    @include assert-equal(
            validate-spacing-arguments((1 2), "margin", "block-end"),
            "ERROR: More than one size supplied with 'block-end' dimension"
    );
  }

  @include test("does not error when 1 size value passed with dimension 'block-end'") {
    @include assert-equal(
            validate-spacing-arguments((1), "margin", "block-end"),
            "OK"
    );
  }

}
