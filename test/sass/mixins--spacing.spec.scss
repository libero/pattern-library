@import "../../node_modules/sass-true/sass/true";
@import "../../source/css/sass/_mixins--spacing.scss";

@include describe('_padding-left [Mixin]') {
  @include it('generates expected padding-left declaration with appropriate fallbacks') {
    @include assert() {

      @include output {
        @include _padding-left(16);
      }

      @include expect {
        padding-left: 16px;
        padding-left: 1rem;
      }

    }

    @include assert() {

      @include output {
        @include _padding-left(0);
      }

      @include expect {
        padding-left: 0;
      }

    }
  }

}

@include describe('_padding-right [Mixin]') {
  @include it('generates expected padding-right declaration with appropriate fallbacks') {
    @include assert() {

      @include output {
        @include _padding-right(16);
      }

      @include expect {
        padding-right: 16px;
        padding-right: 1rem;
      }

    }
  }
}

@include describe("padding [Mixin]") {

  @include it("generates correct fallbacks with a single zero value and no dimension") {
    @include assert() {

      @include output {
        @include padding(0);
      }

      @include expect {
        padding: 0;
      }

    }
  }

  @include it("generates correct fallbacks with a single non-zero value and no dimension") {
    @include assert() {

      @include output {
        @include padding(16);
      }

      @include expect {
        padding: 16px;
        padding: 1rem;
      }

    }
  }

  @include it("generates correct fallbacks with a single zero value for dimension 'inline'") {
    @include assert() {

      @include output {
        @include padding(0, "inline");
      }

      @include expect {
        padding-left: 0;
        padding-right: 0;
        padding-inline: 0;
      }

    }
  }

  @include it("generates correct fallbacks with a single non-zero value for dimension 'inline'") {
    @include assert() {

      @include output {
        @include padding(16, "inline");
      }

      @include expect {
        padding-left: 16px;
        padding-left: 1rem;
        padding-right: 16px;
        padding-right: 1rem;
        padding-inline: 1rem;
      }

    }
  }

  @include it("generates correct fallbacks with a pair of different values for dimension 'inline'") {
    @include assert() {

      @include output {
        @include padding(16 32, "inline");
      }

      @include expect {
        &[dir="ltr"] {
          padding-left: 16px;
          padding-left: 1rem;
          padding-right: 32px;
          padding-right: 2rem;
        }
        &[dir="rtl"] {
          padding-right: 16px;
          padding-right: 1rem;
          padding-left: 32px;
          padding-left: 2rem;
        }

        &:not([data-never-use-this-data-attribute-name-in-html]) {
          padding-inline: 1rem 2rem;
        }
      }

    }
  }

  @include it("generates correct fallbacks with a single zero value for the dimension 'inline-start'") {
   @include assert() {

     @include output {
       @include padding(0, "inline-start");
     }

     @include expect {
       &[dir="ltr"] {
         padding-left: 0;
       }
       &[dir="rtl"] {
         padding-right: 0;
       }
       &:not([data-never-use-this-data-attribute-name-in-html]) {
        padding-inline-start: 0;
       }

   }
  }
}

  @include it("generates correct fallbacks with a single non-zero value for the dimension 'inline-start'") {
   @include assert() {

     @include output {
       @include padding(16, "inline-start");
     }

     @include expect {
       &[dir="ltr"] {
         padding-left: 16px;
         padding-left: 1rem;
       }
       &[dir="rtl"] {
         padding-right: 16px;
         padding-right: 1rem;
       }
       &:not([data-never-use-this-data-attribute-name-in-html]) {
        padding-inline-start: 1rem;
       }
     }
  }
}

  @include it("generates correct fallbacks with a single zero value for the dimension 'inline-end'") {
    @include assert() {

      @include output {
       @include padding(0, "inline-end");
      }

      @include expect {
        &[dir="ltr"] {
         padding-right: 0;
        }
        &[dir="rtl"] {
         padding-left: 0;
        }
        &:not([data-never-use-this-data-attribute-name-in-html]) {
          padding-inline-end: 0;
        }

      }
    }
  }

  @include it("generates correct fallbacks with a single non-zero value for the dimension 'inline-end'") {
    @include assert() {

     @include output {
       @include padding(16, "inline-end");
     }

     @include expect {
       &[dir="ltr"] {
         padding-right: 16px;
         padding-right: 1rem;
       }
       &[dir="rtl"] {
         padding-left: 16px;
         padding-left: 1rem;
       }
       &:not([data-never-use-this-data-attribute-name-in-html]) {
        padding-inline-end: 1rem;
       }
     }
   }
}

  @include it("generates correct fallbacks with a single zero value for dimension 'block'") {
    @include assert() {

      @include output {
        @include padding(0, "block")
      }

      @include expect {
        padding-top: 0;
        padding-bottom: 0;
        padding-block: 0;
      }

    }
  }

  @include it("generates correct fallbacks with a single non-zero value for dimension 'block'") {
    @include assert() {

      @include output {
        @include padding(16, "block")
      }

      @include expect {
        padding-top: 16px;
        padding-top: 1rem;
        padding-bottom: 16px;
        padding-bottom: 1rem;
        padding-block: 1rem;
      }

    }
  }

  // Vertical writing modes not yet supported
  @include it("generates correct fallbacks with a pair of non-zero values for dimension 'block'") {
    @include assert() {

      @include output {
        @include padding(16 32, "block")
      }

      @include expect {
        padding-top: 16px;
        padding-top: 1rem;
        padding-bottom: 32px;
        padding-bottom: 2rem;

        padding-block: 1rem 2rem;
      }

    }
  }

}
